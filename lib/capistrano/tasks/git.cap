# -*- coding: utf-8 -*-

namespace :git do

  repos = [:front, :back, :batch, :lws_framework]
  local_repo_dir = "/tmp/cap_tool/repos"

  desc "create tarball of all repos"
  task :create_tarballs => repos.map{|r| :"#{r}:create_tarball"} do
    puts "finished"
  end

  repos.each do |repo|
    namespace repo do
      repo_dir = File.join(local_repo_dir, repo.to_s)

      directory repo_dir
      file repo_dir do |d|
        run_locally do
          execute :git, :clone, "http://10.230.207.76/#{repo}", d
        end
      end

      # Update the repo mirror for repo
      task :update_local => repo_dir do
        run_locally do
          within repo_dir do
            # execute :git, :tag, "-l", "|xargs", :git, :tag, "-d"
            execute :git, :fetch, '--prune'
          end
        end
      end

      # cleanup local tarballs of repo/branch
      task :cleanup_local => repo_dir do
        branch = fetch(:"branch_#{repo}") || fetch(:branch)
        run_locally do
          within local_repo_dir do
            execute :rm, "-rf", "#{repo}_#{branch}_*.tar.gz"
          end
        end
      end

      # decide the version to upload, tag it when needed
      task :set_revision => [:update_local, :cleanup_local] do
        branch = fetch(:"branch_#{repo}") || fetch(:branch)
        set :"#{repo}_revision", `cd #{repo_dir} && git rev-parse origin/#{branch}`.split.first
        if fetch(:tag_prefix)
          set :"#{repo}_tag", "#{fetch :tag_prefix}#{release_timestamp}"
          run_locally do
            within repo_dir do
              execute :git, :tag, fetch(:"#{repo}_tag"), fetch(:"#{repo}_revision")
            end
          end
        else
          set :"#{repo}_tag", "origin/#{branch}"
        end
      end

      desc "create tarball of the branch for #{repo}"
      task :create_tarball => :set_revision do
        branch = fetch(:"branch_#{repo}") || fetch(:branch)
        created_tarball = File.join(local_repo_dir, "#{repo}_#{branch}_#{release_timestamp}.tar")
        run_locally do
          within repo_dir do
            execute :git, :archive, fetch(:"#{repo}_revision"), "> #{created_tarball}"
            execute :echo, fetch(:"#{repo}_revision"), "> git_revision"
            execute :echo, fetch(:"#{repo}_tag"), "> git_tag"
            execute :tar, "-rf", created_tarball, :git_tag, :git_revision
            execute :rm, "-rf", :git_tag, :git_revision
            execute :gzip, created_tarball
          end
        end
        set :"#{repo}_tarball", "#{created_tarball}.gz"
      end

      # find latest local_tarball of repo and set it to env, else create one
      task :find_tarball do
        branch = fetch(:"branch_#{repo}") || fetch(:branch)
        unless fetch(:"#{repo}_tarball")
          latest = `ls -xt #{local_repo_dir}/#{repo}_#{branch}_*.tar.gz`.split.first
          if latest
            set :"#{repo}_tarball", latest
          else
            invoke "git:#{repo}:create_tarball"
          end
        end
      end

      # push tag to remote
      task :push_tag do
        tag = fetch(:"#{repo}_tag")
        if fetch(:tag_prefix) && tag
          run_locally do
            within repo_dir do
              execute :git, :push, :origin, tag
            end
          end
          set(:git_tag_messages, []) unless fetch(:git_tag_messages)
          fetch(:git_tag_messages) << "created tag #{tag} in #{repo}"
          puts "created tag #{tag} in #{repo}"
        end
      end
    end
  end
end
