# -*- coding: utf-8 -*-

namespace :deploy do

  targets = {
    :front => [:lws_framework, :front],
    :frontmobile => [:lws_framework, :front],
    :back => [:lws_framework, :back],
    :batch => [:lws_framework, :batch]
  }

  desc "deploy latest codes, and restart the servers"
  task :all => "all:restart"

  namespace :all do
    desc "deploy latest codes, stop before restart"
    task :only_deploy => targets.map{|k, v| "#{k}:only_deploy"} do
      puts "deploy all done!"
    end

    desc "deploy already created tarball, stop before restart"
    task :only_deploy_easy => targets.map{|k, v| "#{k}:only_deploy_easy"} do
      puts "easy deploy all done!"
    end

    desc "do restart"
    task :finalize => targets.map{|k, v| "#{k}:finalize"} do
      puts "finalize done!"
    end

    task :restart => targets.map{|k, v| "#{k}:restart"} do
      puts "restart all done!"
    end

    desc "deploy already created tarball, and restart the servers"
    task :restart_easy => targets.map{|k, v| "#{k}:restart_easy"} do
      puts "deploy all done!"
    end
  end

  targets.each do |target, repos|
    desc "deploy latest codes to #{target}, and restart the server"
    task target => "#{target}:restart"

    namespace target do
      desc "deploy latest codes to #{target}, stop before restart."
      task :only_deploy => [:starting, :updating] do
        puts "deploy done!"
      end

      desc "deploy already created tarball to #{target}, stop before restart."
      task :only_deploy_easy => [:set_easy, :starting, :updating] do
        puts "deploy easy done!"
      end

      desc "do restart"
      task :finalize => [:find_servers, :publishing] do
        puts "finalize done!"
      end

      task :restart => [:only_deploy, :publishing, :finishing, :finished] do
        puts "restart done!"
      end

      desc "deploy already created tarball to #{target}, and restart the server"
      task :restart_easy => [:only_deploy_easy, :publishing, :finishing, :finished] do
        puts "restart easy done!"
      end

      task :starting do
        repos.map do |r|
          set :repo, r
          invoke "deploy:#{target}:#{r}:check"
        end
        invoke "deploy:#{target}:misc:create_img_tmp_dir"
      end

      task :set_easy do
        set :easy_mode, true
      end

      task :updating do
        repos.map do |r|
          set :repo, r
          invoke "deploy:#{target}:#{r}:new_release_path"
          # binding.pry
          if fetch(:easy_mode)
            invoke "git:#{r}:find_tarball"
          else
            invoke "git:#{r}:create_tarball"
          end
          invoke "deploy:#{target}:#{r}:create_release"
          invoke "deploy:#{target}:#{r}:symlink:shared"
          unless r == :lws_framework
            invoke "deploy:#{target}:misc:#{r}:modify_gemfile"
            invoke "deploy:#{target}:#{r}:bundler_install"
            invoke "deploy:#{target}:misc:#{r}:replace_files_from_svn"
            unless r == :batch
              invoke "deploy:#{target}:#{r}:assets_precompile"
              unless target == :frontmobile
                invoke "assets:#{r}:upload"
              end
            end
          end
        end
      end

      task :reverting do
        # invoke "deploy:#{target}:#{r}:revert_release"
      end

      task :publishing do
        repos.map do |r|
          set :repo, r
          invoke "deploy:#{target}:#{r}:latest_release_path"
          invoke "deploy:#{target}:#{r}:symlink:release"
          unless [:batch, :lws_framework].include? r
            invoke "deploy:#{target}:#{r}:restart"
          end
        end
      end

      task :finishing do
        repos.map do |r|
          set :repo, r
          invoke "deploy:#{target}:#{r}:cleanup"
        end
      end

      task :finishing_rollback do
      end

      task :finished do
        # log?
      end

      repos.each do |repo|
        namespace repo do
          # upload tarball of repo to releases
          task :create_release => "create_release:extract" do
            puts "created new dir #{release_path}"
          end

          namespace :create_release do
            # upload local tarball of repo to target
            task :upload do
              on roles target do
                execute :mkdir, "-pv", fetch(:tmp_dir)
                upload! fetch(:"#{repo}_tarball"), fetch(:tmp_dir)
              end
            end

            # extract uploaded tarball of repo to target
            task :extract => :upload do
              on roles target do
                within fetch(:tmp_dir) do
                  execute :mkdir, "-pv", release_path
                  execute :tar, "-xzf", File.basename(fetch :"#{repo}_tarball"), "-C", release_path
                  execute :rm, "-rf", File.basename(fetch :"#{repo}_tarball")
                end
              end
            end
          end

          # Check required files and directories exist
          task :check => :find_servers do
            invoke "deploy:#{target}:#{repo}:check:directories"
            invoke "deploy:#{target}:#{repo}:check:linked_dirs"
            invoke "deploy:#{target}:#{repo}:check:make_linked_dirs"
            invoke "deploy:#{target}:#{repo}:check:linked_files"
          end

          namespace :check do
            # Check shared and release directories exist
            task :directories do
              on roles target do
                execute :mkdir, '-pv', shared_path, releases_path
              end
            end

            # Check directories to be linked exist in shared
            task :linked_dirs do
              next unless any? :linked_dirs
              on roles target do
                execute :mkdir, '-pv', linked_dirs(shared_path)
              end
            end

            # Check directories of files to be linked exist in shared
            task :make_linked_dirs do
              next unless any? :linked_files
              on roles target do |host|
                execute :mkdir, '-pv', linked_file_dirs(shared_path)
              end
            end

            # Check files to be linked exist in shared
            task :linked_files do
              next unless any? :linked_files
              on roles target do |host|
                linked_files(shared_path).each do |file|
                  unless test "[ -f #{file} ]"
                    error t(:linked_file_does_not_exist, file: file, host: host)
                    exit 1
                  end
                end
              end
            end
          end

          namespace :symlink do
            # Symlink release to current
            task :release do
              on roles target do
                execute :rm, '-rf', current_path
                execute :ln, '-s', release_path, current_path
              end
            end

            # Symlink files and directories from shared to release
            task :shared do
              invoke "deploy:#{target}:#{repo}:symlink:linked_files"
              invoke "deploy:#{target}:#{repo}:symlink:linked_dirs"
              if repo != :lws_framework
                invoke "deploy:#{target}:#{repo}:symlink:lws_framework"
              end
            end

            # Symlink lws_framework
            task :lws_framework => "lws_framework:create_release" do
              on roles target do
                target_dir = release_path.join("vendor", "gems", "lws_framework")
                source = fetch(:lws_framework_release_path)
                execute :mkdir, '-pv', target_dir
                unless test "[ -L #{target_dir} ]"
                  if test "[ -d #{target_dir} ]"
                    execute :rm, '-rf', target_dir
                  end
                  execute :ln, '-s', source, target_dir
                end
              end
            end

            # Symlink linked directories
            task :linked_dirs do
              next unless any? :linked_dirs
              on roles target do
                # `shared/bundler`は`release_path/vendor/bundler`にsymlinkする
                set :linked_dirs, fetch(:linked_dirs).map{|d| d == "bundler" ? "vendor/#{d}" : d}
                execute :mkdir, '-pv', linked_dir_parents(release_path)

                fetch(:linked_dirs).each do |dir|
                  # lws_frameworkには、bundlerはいらない
                  next if repo == :lws_framework && dir == "vendor/bundler"
                  target_dir = release_path.join(dir)
                  source = shared_path.join(dir.sub(%r{^vendor/}, ""))
                  unless test "[ -L #{target_dir} ]"
                    if test "[ -d #{target_dir} ]"
                      execute :rm, '-rf', target_dir
                    end
                    execute :ln, '-s', source, target_dir
                  end
                end
              end
            end

            # Symlink linked files
            task :linked_files do
              next unless any? :linked_files
              on roles target do
                execute :mkdir, '-pv', linked_file_dirs(release_path)

                fetch(:linked_files).each do |file|
                  target_dir = release_path.join(file)
                  source = shared_path.join(file)
                  unless test "[ -L #{target_dir} ]"
                    if test "[ -f #{target_dir} ]"
                      execute :rm, target_dir
                    end
                    execute :ln, '-s', source, target_dir
                  end
                end
              end
            end
          end

          task :bundler_install do
            on roles target do
              within release_path do
                execute :bundle, :install, "--without=test", "--path vendor/bundler"
              end
            end
          end

          task :assets_precompile do
            on roles target do
              within release_path do
                execute :bundle, :exec, :rake, "assets:clean"
                execute :bundle, :exec, :rake, "assets:precompile"
              end
            end
          end

          task :new_release_path do
            set_release_path
          end

          task :latest_release_path do
            on primary target do
              latest_release = capture(:ls, "-xt", releases_path).split.first
              set_release_path latest_release
            end
          end

          task :last_release_path do
            on primay target do
              last_release = capture(:ls, "-xt", releases_path).split[1]
              set_release_path last_release
            end
          end

          task :restart do
            on roles(target), in: :sequence, wait: 5 do
              execute :touch, current_path.join("tmp", "restart.txt")
            end
          end

          # cleanup old releases
          task :cleanup do
            on roles target do
              releases = capture(:ls, "-xt", releases_path).split
              if releases.count >= fetch(:keep_releases)
                info t(:keeping_releases, host: host.to_s, keep_releases: fetch(:keep_releases), releases: releases.count)
                directories = (releases - releases.first(fetch(:keep_releases)))
                if directories.any?
                  directories_str = directories.map do |release|
                    releases_path.join(release)
                  end.join(" ")
                  execute :rm, '-rf', directories_str
                else
                  info t(:no_old_releases, host: host.to_s, keep_releases: fetch(:keep_releases))
                end
              end
            end
          end


        end
      end
    end
  end
end
