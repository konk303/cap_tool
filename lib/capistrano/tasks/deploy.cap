# -*- coding: utf-8 -*-

namespace :deploy do

  # namespace :upload do
  #   task :all
  #   task :easy
  # end

  targets = {
    :front => [:front, :lws_framework],
    :frontmobile => [:front, :lws_framework],
    :back => [:back, :lws_framework],
    :batch => [:batch, :lws_framework]
  }
  targets.each do |target, repos|
    namespace target do
      task :starting do
        repos.map{|r| invoke "deploy:#{target}:#{r}:check"}
      end

      task :updating => :starting do
        repos.map do |r|
          invoke "deploy:#{target}:#{r}:new_release_path"
          invoke "deploy:#{target}:#{r}:create_release"
          invoke "deploy:#{target}:#{r}:symlink:shared"
        end
      end

      repos.each do |repo|
        namespace repo do
          desc "upload tarball of #{repo} to releases"
          task :create_release => "create_release:extract" do
            puts "created new dir"
          end

          namespace :create_release do
            desc "upload local tarball of #{repo} to #{target}"
            task :upload => [:check, "git:#{repo}:find_tarball"] do
              on roles(target) do
                execute :mkdir, "-pv", fetch(:tmp_dir)
                upload! fetch(:"#{repo}_tarball"), fetch(:tmp_dir)
              end
            end

            desc "extract uploaded tarball of #{repo} to #{target}"
            task :extract => [:upload, :new_release_path] do
              on roles(target) do
                within fetch(:tmp_dir) do
                  execute :mkdir, "-pv", release_path
                  execute :tar, "-xzf", File.basename(fetch :"#{repo}_tarball"), "-C", release_path
                end
              end
            end
          end

          desc 'Check required files and directories exist'
          task :check => [:find_servers] do
            set :repo, repo
            invoke "git:#{repo}:find_tarball"
            invoke "deploy:#{target}:#{repo}:check:directories"
            invoke "deploy:#{target}:#{repo}:check:linked_dirs"
            invoke "deploy:#{target}:#{repo}:check:make_linked_dirs"
            'check:linked_files'
          end

          namespace :check do
            desc 'Check shared and release directories exist'
            task :directories do
              on roles target do
                execute :mkdir, '-pv', shared_path, releases_path
              end
            end

            desc 'Check directories to be linked exist in shared'
            task :linked_dirs do
              next unless any? :linked_dirs
              on roles target do
                execute :mkdir, '-pv', linked_dirs(shared_path)
              end
            end

            desc 'Check directories of files to be linked exist in shared'
            task :make_linked_dirs do
              next unless any? :linked_files
              on roles target do |host|
                execute :mkdir, '-pv', linked_file_dirs(shared_path)
              end
            end

            desc 'Check files to be linked exist in shared'
            task :linked_files do
              next unless any? :linked_files
              on roles target do |host|
                linked_files(shared_path).each do |file|
                  unless test "[ -f #{file} ]"
                    error t(:linked_file_does_not_exist, file: file, host: host)
                    exit 1
                  end
                end
              end
            end
          end

          task :new_release_path do
            set_release_path
          end
        end
      end

      # desc "upload required repos to #{target}"
      # task :execute_easy => repos.map{|r| "#{r}:extract"}

      # desc "fetch and upload required repos to #{target}"
      # task :execute => repos.map{|r| ["git:#{r}:create_tarball", "#{r}:extract"]}.flatten
    end
  end
end
