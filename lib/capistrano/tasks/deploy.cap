# -*- coding: utf-8 -*-

namespace :deploy do

  # namespace :upload do
  #   task :all
  #   task :easy
  # end

  targets = {
    :front => [:lws_framework, :front],
    :frontmobile => [:lws_framework, :front],
    :back => [:lws_framework, :back],
    :batch => [:lws_framework, :batch]
  }
  targets.each do |target, repos|
    namespace target do
      task :starting do
        repos.map do |r|
          set :repo, r
          invoke "deploy:#{target}:#{r}:check"
        end
        invoke "deploy:#{target}:misc:create_img_tmp_dir"
      end

      task :updating => :starting do
        repos.map do |r|
          set :repo, r
          invoke "deploy:#{target}:#{r}:new_release_path"
          invoke "deploy:#{target}:#{r}:create_release"
          invoke "deploy:#{target}:#{r}:symlink:shared"
          unless r == :lws_framework
            invoke "deploy:#{target}:misc:#{r}:modify_gemfile"
            invoke "deploy:#{target}:#{r}:bundler_install"
            invoke "deploy:#{target}:misc:#{r}:replace_files_from_svn"
            unless r == :batch
              invoke "deploy:#{target}:#{r}:assets_precompile"
              invoke "assets:#{r}:upload_to_s3"
            end
          end
        end
      end

      repos.each do |repo|
        namespace repo do
          desc "upload tarball of #{repo} to releases"
          task :create_release => "create_release:extract" do
            puts "created new dir #{release_path}"
          end

          namespace :create_release do
            desc "upload local tarball of #{repo} to #{target}"
            task :upload => [:check, "git:#{repo}:find_tarball"] do
              on roles target do
                execute :mkdir, "-pv", fetch(:tmp_dir)
                upload! fetch(:"#{repo}_tarball"), fetch(:tmp_dir)
              end
            end

            desc "extract uploaded tarball of #{repo} to #{target}"
            task :extract => [:upload, :new_release_path] do
              on roles target do
                within fetch(:tmp_dir) do
                  execute :mkdir, "-pv", release_path
                  execute :tar, "-xzf", File.basename(fetch :"#{repo}_tarball"), "-C", release_path
                  execute :rm, "-rf", File.basename(fetch :"#{repo}_tarball")
                end
              end
            end
          end

          desc 'Check required files and directories exist'
          task :check => [:find_servers] do
            invoke "git:#{repo}:find_tarball"
            invoke "deploy:#{target}:#{repo}:check:directories"
            invoke "deploy:#{target}:#{repo}:check:linked_dirs"
            invoke "deploy:#{target}:#{repo}:check:make_linked_dirs"
            invoke "deploy:#{target}:#{repo}:check:linked_files"
          end

          namespace :check do
            desc 'Check shared and release directories exist'
            task :directories do
              on roles target do
                execute :mkdir, '-pv', shared_path, releases_path
              end
            end

            desc 'Check directories to be linked exist in shared'
            task :linked_dirs do
              next unless any? :linked_dirs
              on roles target do
                execute :mkdir, '-pv', linked_dirs(shared_path)
              end
            end

            desc 'Check directories of files to be linked exist in shared'
            task :make_linked_dirs do
              next unless any? :linked_files
              on roles target do |host|
                execute :mkdir, '-pv', linked_file_dirs(shared_path)
              end
            end

            desc 'Check files to be linked exist in shared'
            task :linked_files do
              next unless any? :linked_files
              on roles target do |host|
                linked_files(shared_path).each do |file|
                  unless test "[ -f #{file} ]"
                    error t(:linked_file_does_not_exist, file: file, host: host)
                    exit 1
                  end
                end
              end
            end
          end

          namespace :symlink do
            desc 'Symlink release to current'
            task :release => [:check, :new_release_path] do
              on roles target do
                execute :rm, '-rf', current_path
                execute :ln, '-s', release_path, current_path
              end
            end

            desc 'Symlink files and directories from shared to release'
            task :shared do
              invoke "deploy:#{target}:#{repo}:symlink:linked_files"
              invoke "deploy:#{target}:#{repo}:symlink:linked_dirs"
              if repo != :lws_framework
                invoke "deploy:#{target}:#{repo}:symlink:lws_framework"
              end
            end

            desc "Symlink lws_framework"
            task :lws_framework => "lws_framework:create_release" do
              on roles target do
                target_dir = release_path.join("vendor", "gems", "lws_framework")
                source = fetch(:lws_framework_release_path)
                execute :mkdir, '-pv', target_dir
                unless test "[ -L #{target_dir} ]"
                  if test "[ -d #{target_dir} ]"
                    execute :rm, '-rf', target_dir
                  end
                  execute :ln, '-s', source, target_dir
                end
              end
            end

            desc 'Symlink linked directories'
            task :linked_dirs => [:check, :new_release_path] do
              next unless any? :linked_dirs
              on roles target do
                # `shared/bundler`は`release_path/vendor/bundler`にsymlinkする
                set :linked_dirs, fetch(:linked_dirs).map{|d| d == "bundler" ? "vendor/#{d}" : d}
                execute :mkdir, '-pv', linked_dir_parents(release_path)

                fetch(:linked_dirs).each do |dir|
                  # lws_frameworkには、bundlerはいらない
                  next if repo == :lws_framework && dir == "vendor/bundler"
                  target_dir = release_path.join(dir)
                  source = shared_path.join(dir.sub(%r{^vendor/}, ""))
                  unless test "[ -L #{target_dir} ]"
                    if test "[ -d #{target_dir} ]"
                      execute :rm, '-rf', target_dir
                    end
                    execute :ln, '-s', source, target_dir
                  end
                end
              end
            end

            desc 'Symlink linked files'
            task :linked_files => [:check, :new_release_path] do
              next unless any? :linked_files
              on roles target do
                execute :mkdir, '-pv', linked_file_dirs(release_path)

                fetch(:linked_files).each do |file|
                  target_dir = release_path.join(file)
                  source = shared_path.join(file)
                  unless test "[ -L #{target_dir} ]"
                    if test "[ -f #{target_dir} ]"
                      execute :rm, target_dir
                    end
                    execute :ln, '-s', source, target_dir
                  end
                end
              end
            end
          end

          task :bundler_install do
            on roles target do
              within release_path do
                execute :bundle, :install, "--without test", "--path vendor/bundler"
              end
            end
          end

          task :assets_precompile do
            on roles target do
              within release_path do
                execute :bundle, :exec, :rake, "assets:clean"
                execute :bundle, :exec, :rake, "assets:precompile"
              end
            end
          end

          task :new_release_path do
            set_release_path
          end
        end
      end

      # desc "upload required repos to #{target}"
      # task :execute_easy => repos.map{|r| "#{r}:extract"}

      # desc "fetch and upload required repos to #{target}"
      # task :execute => repos.map{|r| ["git:#{r}:create_tarball", "#{r}:extract"]}.flatten
    end
  end
end
